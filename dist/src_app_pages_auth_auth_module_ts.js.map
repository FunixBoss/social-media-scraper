{"version":3,"file":"src_app_pages_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/@core/enum/header-type.enum.ts","./src/app/pages/auth/auth-routing.module.ts","./src/app/pages/auth/auth.component.ts","./src/app/pages/auth/auth.module.ts","./src/app/pages/auth/login/login.component.ts","./src/app/pages/auth/login/login.component.html","./src/app/pages/auth/logout/logout.component.ts"],"sourcesContent":["export enum HeaderType {\r\n    AUTHORIZATION = 'Authorization',\r\n    JWT_TOKEN = 'Jwt-Token'\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { LogoutComponent } from \"./logout/logout.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        component: AuthComponent,\r\n        children: [\r\n            {\r\n                path: \"login\",\r\n                component: LoginComponent,\r\n            },\r\n            {\r\n                path: \"logout\",\r\n                component: LogoutComponent\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'ngx-logout',\n  template: `\n    <router-outlet></router-outlet>\n  `,\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent  {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NbAlertModule, NbButtonModule, NbCardModule, NbCheckboxModule, NbInputModule, NbMenuModule, NbSpinnerModule } from '@nebular/theme';\nimport { NbAuthModule } from '@nebular/auth';\nimport { LogoutComponent } from './logout/logout.component';\nimport { AuthComponent } from './auth.component';\nimport { ThemeModule } from '../../@theme/theme.module';\nimport { AuthRoutingModule } from './auth-routing.module';\n\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    LogoutComponent,\n    AuthComponent\n  ],\n  imports: [\n    AuthRoutingModule,\n    CommonModule,\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NbAuthModule,\n    NbCardModule,\n    ReactiveFormsModule,\n    ThemeModule, // @theme\n    NbMenuModule,\n    NbSpinnerModule\n  ],\n  exports: [\n    LoginComponent,\n    LogoutComponent,\n    AuthComponent\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { AuthenticationService } from '../../../@core/services/account/authentication.service';\nimport { Account } from '../../../@core/models/account/account.model';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { ToastState, UtilsService } from '../../../@core/services/utils.service';\nimport { HeaderType } from '../../../@core/enum/header-type.enum';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  loginFormGroup: FormGroup\n  errorMessage: string;\n  loadOnLogin: boolean = false\n  private subscriptions: Subscription[] = []\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private authService: AuthenticationService,\n    private utilsService: UtilsService\n  ) {\n    this.loginFormGroup = this.formBuilder.group({\n      username: ['admin', [Validators.required]],\n      password: ['12345678', [Validators.required]]\n    })\n  }\n\n\n  ngOnInit(): void {\n    if(this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('/admin/dashboard')\n    }\n  }\n\n  login() {\n    if(this.loginFormGroup.invalid) {\n      this.loginFormGroup.markAllAsTouched();\n      return;\n    }\n    this.loadOnLogin = true\n\n    this.subscriptions.push(\n      this.authService.login(this.loginFormGroup.value).subscribe(\n        (response: HttpResponse<Account>) => {\n          const token = response.headers.get(HeaderType.JWT_TOKEN)\n          this.authService.saveToken(token)\n          this.authService.addAccountToLocalCache(response.body)\n          this.router.navigateByUrl(\"/admin/dashboard\")\n          this.authService.authChange()\n        },\n        (error: HttpErrorResponse) => {\n          this.loadOnLogin = false\n          this.errorMessage = error.error.message\n          this.utilsService.updateToastState(new ToastState(error.error.message, \"danger\"))\n        }\n      )\n    )\n\n  }\n\n  saveToken(token: string) {\n    localStorage.setItem('token', token)\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe())\n  }\n\n}\n","<div class=\"d-flex justify-content-center\">\n    <div class=\"custom-div\">\n        <nb-card [formGroup]=\"loginFormGroup\">\n            <nb-card-header class=\"text-center\">Admin Login</nb-card-header>\n            <nb-card-body>\n                <ng-container *ngIf=\"errorMessage !== undefined\">\n                    <div class=\"alert alert-danger mb-3\">\n                        {{errorMessage}}\n                    </div>\n                </ng-container>\n\n                <input type=\"text\" nbInput fullWidth status=\"basic\" placeholder=\"Username\" formControlName=\"username\">\n                <div class=\"alert alert-danger mt-1\"\n                    *ngIf=\"loginFormGroup.get('username').invalid && (loginFormGroup.get('username').dirty || loginFormGroup.get('username').touched)\">\n                    <div *ngIf=\"loginFormGroup.get('username').errors['required']\">\n                        Username is required\n                    </div>\n                </div>\n                \n                <input type=\"password\" nbInput fullWidth status=\"basic\" placeholder=\"Password\" formControlName=\"password\"\n                    class=\"mt-3\">\n                <div class=\"alert alert-danger mt-1\"\n                    *ngIf=\"loginFormGroup.get('password').invalid && (loginFormGroup.get('password').dirty || loginFormGroup.get('password').touched)\">\n                    <div *ngIf=\"loginFormGroup.get('password').errors['required']\">\n                        Password is required\n                    </div>\n                </div>\n\n                \n            </nb-card-body>\n            <nb-card-footer class=\"text-center\">\n                <button [nbSpinner]=\"loadOnLogin\" nbSpinnerStatus=\"primary\" \n                    nbButton status=\"success\" (click)=\"login()\">\n                    LOGIN\n                </button>\n            </nb-card-footer>\n        </nb-card>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../../../@core/services/account/authentication.service';\n\n@Component({\n  selector: 'ngx-logout',\n  template: '<p></p>',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent  {\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {\n    this.authService.logout()\n    this.authService.authChange()\n    this.router.navigateByUrl('/admin/auth/login')\n  }\n\n  \n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}